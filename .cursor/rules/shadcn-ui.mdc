---
alwaysApply: true
description: "shadcn UI component library usage guidelines"
---

# shadcn UI Component Library Guidelines

This project uses **shadcn UI** for all UI elements and components.

## Project Configuration

The project is already initialized with shadcn UI as evidenced by:
- [components.json](mdc:components.json) - shadcn configuration file
- [src/components/ui/](mdc:src/components/ui/) - UI components directory
- [src/lib/utils.ts](mdc:src/lib/utils.ts) - Utility functions including `cn()` helper

## Installation Commands

### If shadcn UI is not initialized (emergency fallback):
```bash
npx shadcn@latest init
```

### To add a new component:
```bash
npx shadcn@latest add <component-name>
```

**Examples:**
- `npx shadcn@latest add button`
- `npx shadcn@latest add dialog`
- `npx shadcn@latest add form`
- `npx shadcn@latest add table`

## Guidelines

1. **Always use shadcn UI components** for all UI elements instead of creating custom components from scratch
2. **Check existing components first** in [src/components/ui/](mdc:src/components/ui/) before adding new ones
3. **Import components** from `@/components/ui/<component-name>`
4. **Use the `cn()` utility** from [src/lib/utils.ts](mdc:src/lib/utils.ts) for conditional className merging
5. **Follow shadcn conventions** for component styling and structure

## Available Components

Currently installed shadcn UI components:
- [button.tsx](mdc:src/components/ui/button.tsx)
- [card.tsx](mdc:src/components/ui/card.tsx)  
- [input.tsx](mdc:src/components/ui/input.tsx)

## Component Usage Example

```tsx
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { cn } from "@/lib/utils"

export function ExampleComponent() {
  return (
    <Card className={cn("w-full max-w-md")}>
      <CardHeader>
        <CardTitle>Example</CardTitle>
      </CardHeader>
      <CardContent>
        <Button variant="default">Click me</Button>
      </CardContent>
    </Card>
  )
}
```